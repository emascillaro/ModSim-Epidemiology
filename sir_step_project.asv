function [s_n, i_n, r_n] = sir_step_project(s, i, r, beta, gamma, lambda, mu, num_steps)
% fcn_step Advance an SIR model one timestep
%
% Usage
%   [s_n, i_n, r_n] = fcn_step(s, i, r, beta, gamma)
% 
% Arguments
%   s = current number of susceptible individuals
%   i = current number of infected individuals
%   r = current number of recovered individuals
%   
%   beta = infection rate parameter
%   gamma = recovery rate paramter
% 
% Returns
%   s_n = next number of susceptible individuals
%   i_n = next number of infected individuals
%   r_n = next number of recovered individuals
if 0 <= num_steps <= 20;
    s_n = s - beta*s*i - mu*s;
    i_n = i + beta*s*i - gamma*i;
    r_n = r + gamma*i + mu*s;  
else
    s_n = s - beta*s*i - mu*s + lambda*r*i;
    i_n = i + beta*s*i - gamma*i;
    r_n = r + gamma*i - lambda*r*i + mu*s;
end 

reinfected = lambda*r*i

% This way of enforcing invariants does not actually conserve persons!
%s_n = max(s_n, 0);
%i_n = max(i_n, 0);
%r_n = max(r_n, 0);
    
end